'use strict'; 
 
//############################# 
//    MODULES 
//############################# 
const Promise = require('bluebird'); 
const Util = require('util'); 
const uuidv4 = require('uuid/v4'); 
const Moment = require('moment'); 
const cloneDeep = require('lodash/cloneDeep'); 
 
const BBHelpers = require('bb-helpers.js'); 
const BBSSHelpers = require('bb-spreadsheet-helpers.js'); 
const Helpers = require('helpers.js'); 
 
//##################################### 
//   MAIN FLAT-BAND-INDIVIDUAL CLASS 
//##################################### 
class FlatBandIndividual { 
 
  // Constructor 
  constructor(ssFile, rowNum, gamebird) { 
 
    this.ssFilename = ssFile;
    this.ssRowNum = rowNum;
    this.bandRecordId = uuidv4();
    this.creationTimestamp = Moment().toDate().toISOString();
    this.updateTimestamp = Moment().toDate().toISOString();

    // Flat table schema used to define object properties  
    this.bandPrefixNumber = null; 
    this.bandShortNumber = null; 
 
    this.changedBandPrefixNumber = null; 
    this.changedBandShortNumber = null; 
 
    this.recordTimestamp = null; 
    this.recordTimestampAccuracy = null;
    this.moratoriumTimestamp = null; 
  
    this.nznbbsCode = null;
    this.captureCode = null; 
    this.statusCode = null; 
    this.statusDetailCodes = []; 
    this.statusDetailCodeOtherDescription = null; 
 
    this.bird = { 
      birdId: null, 
      scientificName: null, 
      commonName: null, 
      speciesCode: null, 
      age: null, 
      sex: null, 
      gamebird: gamebird,   // Passed Value 
      wildCaptive: null, 
      condition: null, 
      p: [], 
      moultSummary: null, 
      mass: null, 
      massUnit: null, 
      tailLength: null, 
      tailLengthUnit: null, 
      wingLength: null, 
      wingLengthUnit: null, 
      headPlusBill: null, 
      headPlusBillUnit: null, 
      billLength: null, 
      billLengthUnit: null, 
      billDepth: null, 
      billDepthUnit: null, 
      billWidth: null, 
      billWidthUnit: null, 
      billShape: null, 
      billShapeUnit: null, 
      culmen: null, 
      culmenUnit: null, 
      tarsusLengthMinimum: null, 
      tarsusLengthMinimumUnit: null, 
      tarsusLengthMaximum: null, 
      tarsusLengthMaximumUnit: null, 
      tarsusDepth: null, 
      tarsusDepthUnit: null, 
      tarsusWidth: null, 
      tarsusWidthUnit: null, 
      tarsusPlusToe: null, 
      tarsusPlusToeUnit: null, 
      midtoePlusClaw: null, 
      midtoePlusClawUnit: null, 
      methodOfSexing: null, 
      methodOfSexingUnit: null, 
      irisColour: null, 
      irisColourUnit: null, 
      fatScore: null, 
      fatScoreUnit: null, 
      broodPatch: null, 
      broodPatchUnit: null, 
      plumage: null, 
      plumageUnit: null, 
      wearOfPrimaries: null, 
      wearOfPrimariesUnit: null, 
      sire: null, 
      sireUnit: null, 
      dam: null, 
      damUnit: null, 
      bbPartner: null, 
      bbPartnerUnit: null, 
      chicks: null, 
      chicksUnit: null, 
      behaviour: null, 
      behaviourUnit: null, 
      nestNumber: null, 
      nestNumberUnit: null, 
      bloodSample: null, 
      bloodSampleUnit: null, 
      featherSample: null, 
      featherSampleUnit: null, 
      pathologyReport: null, 
      pathologyReportUnit: null, 
      museumAccessionNumber: null, 
      museumAccessionNumberUnit: null, 
      timeOfDay: null, 
      timeOfDayUnit: null, 
      weather: null, 
      weatherUnit: null, 
      photo: null, 
      photoUnit: null, 
      otherDetail1: null, 
      otherUnit1: null, 
      otherData1: null
    } 
 
    this.person = { 
      l3: { 
        number: null, 
        firstName: null, 
        surname: null, 
        orgName: null, 
        contact: null 
      }, 
      bander: { 
        number: null, 
        firstName: null, 
        surname: null, 
        orgName: null, 
        contact: null 
      }, 
      other: { 
        number: null, 
        firstName: null, 
        surname: null, 
        orgName: null, 
        contact: null 
      } 
    } 
 
    this.location = { 
      description: null, 
      localityGeneral: null, 
      latitude: null, 
      longitude: null, 
      northing: null, 
      easting: null, 
      coordinateSystem: null, 
      localityAccuracy: null, 
      birdRegionCode: null 
    } 
 
    this.marks = []; 
 
    this.bands = { 
      bandsAndPositions: [], 
      projectSummaryCode: null, 
      projectColourLeft: null, 
      projectColourRight: null 
    } 
 
    // This field captures whether there is any transponder of a particular type on the bird 
    // Position is not typically recorded 
    this.transponderType = []; 
 
    this.otherMarkDescription = null; 
 
    this.comments = null; 
 
  } 
 
  // Class method to populate an individual band record instance based on a ss template mapping  
  //  and a submitted spreadsheet. Validation is not carried out at this point. 
  populateFromSpreadsheet(row, mapping, gamebird = false) { 
    // ---------------------------------------------------------------------------- 
    return new Promise((resolve, reject) => { 
 
      // VERBOSE FOR LARGE BATCHES!!! 
      // console.info("FlatBandIndividual.populateFromSpreadsheet()"); 

      // Loop through the flat table mapping to confirm the spreadsheet columns related to the flat table 
      // Internal Node object population has been based on a two-stage approach, 
      //    1) We populate the core information (which if available we want to trust as a top priority) 
      //    2) We review the core information and adjust this with supplementary information if available 
      //       [In particular this is related to the processing of colour band information which may be duplicated with more/less specific information] 
 
      // This section will process CORE INFORMATION 
      // ******************************************************************************* 
 
          // General form -> get flat table column header 
          //              -> check that flat table column header  
          //                 has an associated mapping for this  
          //                 spreadsheet version. 
          //              -> if the value is not submitted with the 
          //                 spreadsheet, it will be changed from 
          //                 null to undefined 
 
          // Check that flat table mapping exists for the spreadsheet version, 
          // and that the column will not be part of an array data structure 
          // or any other data structure which requires special handling (e.g. colours/positions/datetimes) 
 
          // Note -> heavy lifting has been modularised into static helpers within ../bb_spreadsheet_helpers.js 
          //      -> helpers have primarily been used to abstract business logic and parsing detail 
          //         in order to make this file more declarative. 

      console.info("Populating record from spreadsheet row " + (Number(this.ssRowNum) + 2) + " (index: " + Number(this.ssRowNum) + ")");
      console.info("----------------------------------------------------------");

      for (var flatTableColumn in mapping) { 
        if (mapping.hasOwnProperty(flatTableColumn)) { 
 
          // console.info("Mapping " + String([mapping[flatTableColumn]]) + " > " + String(flatTableColumn) + "...");
          console.info(flatTableColumn);
          
          // Process the incoming value for each mapping column in its own special way.
          switch(flatTableColumn){
            
          // --------------------------------------------------------------- 
          // Handle the easiest chunk of the first tier band-record data 
          // ---------------------------------------------------------------             
            case 'bandPrefixNumber': 
            // ----------------------------------
              var rowValue = row[mapping[flatTableColumn]];
              this.bandPrefixNumber = rowValue ? String(rowValue).trim().toLowerCase() : null; 
              break;

            case 'bandShortNumber':
              // ----------------------------------
              var rowValue = row[mapping[flatTableColumn]];            
              this.bandShortNumber = rowValue ? String(rowValue).trim().toLowerCase() : null;
              break;

            case 'transponderType':
              // ----------------------------------
              var rowValue = row[mapping[flatTableColumn]];              
              rowValue ? this.transponderType.push(rowValue.toLowerCase()) : null;
              break;

            case 'recordTimestampAccuracy':
              // ----------------------------------
              var rowValue = row[mapping[flatTableColumn]];              
              this.recordTimestampAccuracy = rowValue ? String(rowValue).trim().toLowerCase() : 'u';
              break;

            case 'nznbbsCode':
              // ----------------------------------
              var rowValue = row[mapping[flatTableColumn]];              
              this.nznbbsCode = (rowValue || rowValue === 0 || rowValue === '0') ? String(rowValue).toLowerCase() : null;
              switch(this.nznbbsCode){
                case 'x':
                  this.statusCode = '0';
                  break;

                case 'c':
                case 'z':
                case '1':
                case '2':
                case '2a':
                case '2b':
                case '2c':
                case '2d':
                case '3':
                case '4':
                default:
                  this.statusCode = '0';
                  break; 
              }
              break;

            case 'captureCode':
              // ----------------------------------
              var rowValue = row[mapping[flatTableColumn]];              
              this.captureCode = (rowValue || rowValue === 0 || rowValue === '0') ? BBSSHelpers.parseRegex(rowValue, /^([0-9]{1,2}[a-z]{0,1})(?:[. ]{1,2}(?:resighted|caught|captured|unknown|other){1}.*){0,1}$/) : null; 
              break;

          // --------------------------------------------------------------- 
          // Process status detail codes 
          // ---------------------------------------------------------------               
            case 'statusCode':
              // ----------------------------------
              var rowValue = row[mapping[flatTableColumn]];              
              this.statusCode = (rowValue || rowValue === 0 || rowValue === '0') ? BBSSHelpers.parseRegex(rowValue, /^([0-9]{1,2}[a-z]{0,1})(?:[. ]{1,2}(?:unknown|dead|freshly|alive|band){1}.*){0,1}$/) : this.statusCode; 
              break;

            case 'statusDetailCode1':
            case 'statusDetailCode2':
              // ----------------------------------
              var rowValue = row[mapping[flatTableColumn]];            
              rowValue ? this.statusDetailCodes.push(BBSSHelpers.parseRegex(rowValue, /^[0]{0,1}([0-9]{1,2}[a-z]{0,1})(?:[. ]{1,2}(?:caught|roosting|seen|dead|chick|at breeding|breeding|not breeding|on empty nest|with mate|with egg|with more|with chick|dead\/live|injured|exhausted|other){1}.*){0,1}$/)) : null; 
              break;

          // --------------------------------------------------------------- 
          // Process datetime data 
          // ---------------------------------------------------------------              
            case 'recordTimestamp':
            case 'moratoriumTimestamp':
              // ----------------------------------
              var rowValue = row[mapping[flatTableColumn]];
              // console.info(flatTableColumn + ": " + rowValue + " " + (typeof rowValue) );
              this[flatTableColumn] = rowValue ? Helpers.excelDateToDate(rowValue).toISOString() : null;
              break;

          // --------------------------------------------------------------- 
          // Process bird nested object data 
          // ---------------------------------------------------------------               
            case 'age':
              // ----------------------------------
              var rowValue = row[mapping[flatTableColumn]];              
              this.bird.age = rowValue ? BBSSHelpers.parseRegex(rowValue, /^([A-z]|[0-9]{1,3}[+-]{0,1})$/) : null; 
              break;

            case 'condition':
              // ----------------------------------
              var rowValue = row[mapping[flatTableColumn]];       
              this.bird.condition = (rowValue || rowValue === 0 || rowValue === '0') ? BBSSHelpers.parseRegex(String(rowValue).toLowerCase(), /^([0-9]{1,2})[. ]{0,2}(?:good|poor|injured \/ sick|rehabilitated|artificially reared|dead|other: add in notes){0,1}$/) : null; 
              
              // If bird condition unassigned at this point, and NZNBBS Code is not 'X' (dead), then default to condition = '0' (good) 
              if (!this.bird.condition){
                var nznbbsCode = row[mapping['nznbbsCode']];
                nznbbsCode = (nznbbsCode || nznbbsCode === 0 || rowValue === '0') ? String(nznbbsCode).toLowerCase() : null;
                
                switch(nznbbsCode){
                  case 'x':
                    this.bird.condition = '5';
                    break;
  
                  case 'c':
                  case 'z':
                  case '1':
                  case '2':
                  case '2a':
                  case '2b':
                  case '2c':
                  case '2d':
                  case '3':
                  case '4':
                  default:
                    this.bird.condition = '0';
                    break; 
                }                
              }
              break;

            case 'wildCaptive':
              // ----------------------------------
              var rowValue = row[mapping[flatTableColumn]];              
              this.bird.wildCaptive = rowValue ? String(rowValue).toLowerCase() : null;
              switch(this.bird.wildCaptive){
                case 'w': this.bird.wildCaptive = 'wild'; break;
                case 's': this.bird.wildCaptive = 'source site'; break;
                case 'c': this.bird.wildCaptive = 'captivity'; break;
                case 'r': this.bird.wildCaptive = 'release site'; break;
              }
              break;

            case 'scientificName':
            case 'commonName': 
            case 'speciesCode': 
            case 'sex':
              // ----------------------------------
              var rowValue = row[mapping[flatTableColumn]];              
              this.bird[flatTableColumn] = rowValue ? String(rowValue).toLowerCase() : null; 
              break;

            case 'p':
              // ----------------------------------              
              this.bird.p = [];

              mapping[flatTableColumn].forEach((detail) => { 
                // Skip null/undefined values
                // Otherwise push an integer value to the array.
                if (row[detail] || row[detail] === 0 || row[detail] === '0') this.bird.p.push(parseInt(row[detail]));
              });
 
          // --------------------------------------------------------------- 
          // 5) Process plumage score array and moult summary 
          // --------------------------------------------------------------- 
            case 'moultSummary':
              // ----------------------------------
              var rowValue = row[mapping[flatTableColumn]];            
              this.bird.moultSummary = rowValue ? String(rowValue) : null; 
              break; 

          // --------------------------------------------------------------- 
          // Process bird-in-hand details 
          // --------------------------------------------------------------- 
            case 'detail':
              // ----------------------------------
              mapping[flatTableColumn].forEach((detail, idx) => { 

                // console.log("Detail: " + detail + " Row Value: " + row[detail]);

                // The row value of the details column is the name of the detail itself.
                // If there's no value, skip this one and try the next. This will
                // catch both null and undefined values.
                if (!row[detail]) return;

                // Otherwise, we've got a good one. Try and clease the name so we
                // can use it properly.
                var detailName = BBSSHelpers.CleanseDetailString(row[detail]);

                // Got the clean detail name. Now get the value and unit associated with it.
                switch(detailName){
                  case 'billShape': 
                  case 'methodOfSexing': 
                  case 'irisColour': 
                  case 'broodPatch':
                  case 'plumage': 
                  case 'wearOfPrimaries': 
                  case 'sire':
                  case 'dam': 
                  case 'bbPartner':
                  case 'chicks': 
                  case 'nestNumber':
                  case 'bloodSample': 
                  case 'featherSample': 
                  case 'museumAccessionNumber': 
                  case 'behaviour':
                  case 'timeOfDay': 
                  case 'weather':
                  case 'pathologyReport': 
                  case 'photo':
                  case 'otherDetail1':
                    this.bird[detailName] = row[mapping['data'][idx]] ? String(row[mapping['data'][idx]]).toLowerCase() : null;
                    break;

                  case 'mass': 
                  case 'tailLength': 
                  case 'wingLength': 
                  case 'headPlusBill':
                  case 'billLength':
                  case 'billDepth':
                  case 'billWidth':                  
                  case 'culmen':
                  case 'tarsusWidth':
                  case 'tarsusLengthMinimum':
                  case 'tarsusLengthMaximum':
                  case 'tarsusDepth':
                  case 'tarsusPlusToe':
                  case 'midtoePlusClaw':
                  case 'fatScore':
                  this.bird[detailName] = row[mapping['data'][idx]] ? Number(row[mapping['data'][idx]]) : null;
                    break;  
                    
                  default:
                  case 'otherDetailData1':
                  this.bird[detailName] = row[mapping['data'][idx]];
                }

                // Got the detail name, detail value, now get the unit
                // Unit name is the same as the value name, with 'Unit' appended.
                this.bird[detailName + 'Unit'] = row[mapping['unit'][idx]] ? String(row[mapping['unit'][idx]]).toLowerCase() : null;
              }); 
              break;

          // --------------------------------------------------------------- 
          // Process person nested object data 
          // --------------------------------------------------------------- 
            case 'proposedL3Number': 
            case 'proposedL3Name':
            case 'proposedL3OrgName':
            case 'proposedL3Contact':
            case 'proposedBanderNumber':
            case 'proposedBanderName': 
            case 'proposedBanderOrgName':
            case 'proposedBanderContact':
            case 'proposedOtherNumber':
            case 'proposedOtherName':
            case 'proposedOtherOrgName':
            case 'proposedOtherContact':
              var rowValue = row[mapping[flatTableColumn]]; 
              var personDetail = BBSSHelpers.parsePersonDetails(rowValue, flatTableColumn); 
              personDetail.map(personDetail => { 
                this.person[personDetail.personType][personDetail.propertyName] = personDetail.value; 
              })
              break;

          // --------------------------------------------------------------- 
          // Process location nested object data 
          // --------------------------------------------------------------- 
            
            case 'birdRegionCode':
              var rowValue = row[mapping[flatTableColumn]]; 
              // Special Processing for the bird region code.
              this.location.birdRegionCode = rowValue ? BBSSHelpers.TransformBirdRegionCode(rowValue, gamebird) : null;
              break;

            case 'locationDescription':
              var rowValue = row[mapping[flatTableColumn]];
              // Change the property name, value is a string.
              this.location.description = rowValue ? String(rowValue) : null;        
              break;

            case 'localityGeneral':
            case 'coordinateSystem':
              var rowValue = row[mapping[flatTableColumn]];
              // Use the property name as-is, value is a string
              this.location[flatTableColumn] = rowValue ? String(rowValue) : null;        
              break;
              
            case 'localityAccuracy':
            case 'latitude':
            case 'longitude':
            case 'northing':
            case 'easting':
              var rowValue = row[mapping[flatTableColumn]];
              // Use the property name as-is, value is a Number
              this.location[flatTableColumn] = rowValue ? Number(rowValue) : null;
              break;

          // --------------------------------------------------------------- 
          // Process marks array object data 
          // --------------------------------------------------------------- 
            case 'marks':
                // Mark array object could be comma separated with/without spaces 
                //  -> This will be handled similar to a person's first/surname separation 
              var rowValue = row[mapping[flatTableColumn]]; 
              this.marks = BBSSHelpers.parseMarksArray(String(rowValue)); 
              break;

          // --------------------------------------------------------------- 
          // Process bands nested object data 
          // --------------------------------------------------------------- 
            case 'colour':
              var rowValues = [];
              for (var rowProp in mapping[flatTableColumn]) {
                rowValues.push(row[rowProp]);
              }

              this.bands.bandsAndPositions = BBSSHelpers.parseBandDetails(row, rowValues, mapping); 
              break;

            case 'colourLeft':
            case 'colourRight':
              var rowValue = row[mapping[flatTableColumn]]; 
              this.bands['project' + flatTableColumn.charAt(0).toUpperCase() + flatTableColumn.slice(1)] = rowValue ? String(rowValue) : null; 
              break;

            case 'colourSummaryCode':
              var rowValue = row[mapping[flatTableColumn]];
              this.bands.projectSummaryCode = rowValue ? String(rowValue) : null; 
              break;

            // --------------------------------------------------------------- 
            // Default General Property Handling 
            // ---------------------------------------------------------------             
            case 'statusDetailCodeOtherDescription':
            case 'transponderType':
            case 'otherMarkDescription':
            case 'comments':
            default:
              // ----------------------------------
              var rowValue = row[mapping[flatTableColumn]];              
              this[flatTableColumn] = rowValue ? String(rowValue) : null;
          }
        } 
      } 
 
      // --------------------------------------------------------------- 
      // Supplement band details with particulars (after all flat table mapping has been handed) 
      // --------------------------------------------------------------- 
      if (!this.captureCode){
        switch(this.nznbbsCode){
          case '1':
          case '2':
          case '2b':
          case '2c':
          case '2d':
          case '3':
          case '4':
          case 'x':
            this.captureCode = "18";
            break;
          
          case '2a':
            this.captureCode = "0";   
        }
      }

      this.bands.bandsAndPositions.map(band => { 
        return BBSSHelpers.supplementBandDetails(row, mapping, band); 
      }); 
 
      // If marks array is empty and bandsAndPositions have been recorded, 
      //  -> Use this to populate a minimal version of the marks array 
      if (this.marks.length === 0 && this.bands.bandsAndPositions.length > 0) { 
        this.marks = this.bands.bandsAndPositions.reduce((marks, band) => { 
          // Metal 
          if (band.bandType === 'metal' && band.bandColour !== 'silver') { 
            !marks.includes('1') && marks.push('1'); 
          } 
          // Coloured Metal 
          else if (band.bandType === 'metal') { 
            !marks.includes('0') && marks.push('0'); 
          } 
          // Coloured alphanumeric flag 
          else if (band.bandType && band.flag && band.alphaNumericText) { 
            !marks.includes('3a') && marks.push('3a'); 
          } 
          // Coloured flag 
          else if (band.bandType && band.flag) { 
            !marks.includes('2a') && marks.push('2a'); 
          } 
          // Alphanumeric colour band 
          else if (band.bandType && band.flag && band.alphaNumericText) { 
            !marks.includes('3') && marks.push('3'); 
          } 
          // Regular colour band 
          else if (band.bandType) { 
            !marks.includes('2') && marks.push('2'); 
          } 
          return marks; 
        }, []); 
      } 

      // All Done
      console.info(this);
      console.info("----------------------------------------------------------");
      return resolve(this);  
    })
  } 
 
  // createFromJSON(json) { 
  //   // ---------------------------------------------------------------------------- 
  //   return new Promise((resolve, reject) => { 
 
  //     console.info("FlatBandIndividual.createFromJSON()"); 
 
 
 
  //   }); 
  // } 
 
  // flop() { 
  //   // ---------------------------------------------------------------------------- 
  //   return new Promise((resolve, reject) => { 
 
  //     // Verbose for large batches!!! 
  //     // console.info("FlatBandIndividual.flop()"); 
 
  //     return resolve({ 
  //       bandRecordId: this.bandRecordId, 
  //       ssFilename: this.ssFilename, 
  //       ssRowNum: this.ssRowNum, 
  //       bandPrefixNumber: this.bandPrefixNumber, 
  //       bandShortNumber: this.bandShortNumber, 
  //       changedBandPrefixNumber: this.changedBandPrefixNumber, 
  //       changedBandShortNumber: this.changedBandShortNumber, 
  //       recordTimestamp: this.recordTimestamp ? this.recordTimestamp : null, 
  //       recordTimestampAccuracy: this.recordTimestampAccuracy, 
  //       creationTimestamp: this.creationTimestamp ? this.creationTimestamp : null, 
  //       updateTimestamp: this.updateTimestamp ? this.updateTimestamp : null, 
  //       moratoriumTimestamp: this.moratoriumTimestamp ? this.moratoriumTimestamp : null, 
  //       nznbbsCode: this.nznbbsCode, 
  //       captureCode: this.captureCode, 
  //       statusCode: this.statusCode, 
  //       statusDetailCodes: this.statusDetailCodes, 
  //       statusDetailCodeOtherDescription: this.statusDetailCodeOtherDescription, 
  //       bird: this.bird, 
  //       person: { 
  //         l3: this.person.l3, 
  //         bander: this.person.bander, 
  //         other: this.person.other 
  //       }, 
  //       location: this.location, 
  //       marks: this.marks, 
  //       bands: this.bands, 
  //       transponderType: this.transponderType, 
  //       otherMarkDescription: this.otherMarkDescription, 
  //       comments: this.comments, 
  //     }) 
  //   }) 
  // } 
} 
 
//############################# 
//    EXPORTS 
//############################# 
module.exports = { 
  FlatBandIndividual: FlatBandIndividual 
} 
 
 
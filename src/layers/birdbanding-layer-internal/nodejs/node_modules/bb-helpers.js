'use strict'; 
 
/* 
*   Drop this file into ./lib of your Serverless service. 
* 
*/ 
const Util = require('util'); 
const fs = require('fs'); 
// ============= 
// MODULES 
// ============= 
 
// ============= 
// CONSTS 
// ============= 

const ADMIN_GROUP_NAME = `${process.env.ENVIRONMENT}-${process.env.SERVICE_NAME}-admin-group`;
const MANAGER_GROUP_NAME = `${process.env.ENVIRONMENT}-${process.env.SERVICE_NAME}-manager-group`;
const USER_GROUP_NAME = `${process.env.ENVIRONMENT}-${process.env.SERVICE_NAME}-user-group`;
const READ_ONLY_GROUP_NAME = `${process.env.ENVIRONMENT}-${process.env.SERVICE_NAME}-read-only-group`;

const ALLOWABLE_EVENT_SORT_ORDERS = {
  'standard': {
    'materialized_view_name': 'search_events'
  },
  'eventTimestamp': {
    'materialized_view_name': 'search_events_sort_timestamp'
  },
  'prefixNumber': {
    'materialized_view_name': 'search_events_sort_prefix_number'
  },
  'shortNumber': {
    'materialized_view_name': 'search_events_sort_short_number'
  },
  'projectName': {
    'materialized_view_name': 'search_events_sort_project_name'
  },
  'reporterCertNumber': {
    'materialized_view_name': 'search_events_sort_reporter_cert_number'
  },
  'speciesCommonName': {
    'materialized_view_name': 'search_events_sort_species_common_name'
  },
  'uploadTimestamp': {
    'materialized_view_name': 'search_events_sort_row_creation_timestamp'
  }
};
const ALLOWABLE_EVENT_S_SORT_ORDERS = {
  'eventTimestamp': {
    'sort_field': 'event_timestamp'
  },
  'projectName': {
    'sort_field': 'project_name'
  },
  'reporterCertNumber': {
    'sort_field': 'reporter_nznbbs_certification_number'
  },
  'speciesCode': {
    'sort_field': 'species_code_nznbbs'
  },
  'speciesCommonName': {
    'sort_field': 'common_name_nznbbs'
  },
  'locationDescription': {
    'sort_field': 'location_description'
  },
  'uploadTimestamp': {
    'sort_field': 'row_creation_timestamp_'
  }
};
const ALLOWABLE_EVENT_FILTERS = {
  'projectName': {
    'filter_name': 'project_name ='
  },
  'projectId': {
    'filter_name': 'project_id ='
  },
  'birdId': {
    'filter_name': 'bird_id ='
  },
  'speciesCode': {
    'filter_name': 'species_species_code_nznbbs ='
  },
  'speciesId': {
    'filter_name': 'species_id ='
  },
  'speciesGroup': {
    'filter_name': 'species_group_id ='
  },
  'regionName': {
    'filter_name': 'location_comment ='
  },
  'bandingScheme': {
    'filter_name': 'event_banding_scheme ='
  },
  'reporterId': {
    'filter_name': 'event_reporter_id ='
  },
  'eventDate': {
    'filter_name': 'event_timestamp::date ='
  },
  'eventDateGte': {
    'filter_name': 'event_timestamp >='
  },
  'eventDateLte': {
    'filter_name': 'event_timestamp <='
  },
  'nznbbsCode': { }
};
const ALLOWABLE_EVENT_S_FILTERS = {
  'projectId': {
    'filter_name': ['project_id =']
  },
  'speciesId': {
    'filter_name': ['species_id =']
  },
  'speciesGroup': {
    'filter_name': ['species_group_id =']
  },
  'bandingScheme': {
    'filter_name': ['event_banding_scheme =']
  },
  'reporterId': {
    'filter_name': ['event_reporter_id =']
  },
  'providerId': {
    'filter_name': ['event_provider_id =']
  },
  'ownerId': {
    'filter_name': ['event_owner_id =']
  },
  'userId': {
    'filter_name': ['event_reporter_id =', 'event_provider_id =', 'event_owner_id =']
  },
  'eventDate': {
    'filter_name': ['event_timestamp::date =']
  },
  'eventDateGte': {
    'filter_name': ['event_timestamp >=']
  },
  'eventDateLte': {
    'filter_name': ['event_timestamp <=']
  },
  'latitudeGte': {
    'filter_name': ['latitude >=']
  },
  'latitudeLte': {
    'filter_name': ['latitude <=']
  },
  'longitudeGte': {
    'filter_name': ['longitude >=']
  },
  'longitudeLte': {
    'filter_name': ['longitude <=']
  },
  'nznbbsCode': { }
};
const ALLOWABLE_PROJECT_FILTERS = {
  'projectState': {
    'filter_name': 'project_state ='
  }
};
const ALLOWABLE_EVENT_SEARCHES = {
  'prefixNumber': {
    'filter_name': 'mark_prefix_number =',
    'wildcard_filter_name': 'mark_prefix_number LIKE'
  },
  'shortNumber': {
    'filter_name': 'mark_short_number =',
    'wildcard_filter_name': 'mark_short_number LIKE'
  }
};
const ALLOWABLE_EVENT_S_SEARCHES = {
  'locationDescription': {
    'filter_name': 'location_description =',
    'wildcard_filter_name': 'location_description ILIKE'
  }
};

const USER_MARK_STATE_ACTIONS = {
  'NEW': ['LOST'],
  'ALLOCATED': ['LOST', 'PRACTICE', 'OTHER'],
  'RETURNED': ['LOST', 'OTHER'],
  'LOST': ['ALLOCATED', 'RETURNED_USED'],
  'ATTACHED': [],
  'DETACHED': ['RETURNED_USED', 'OTHER'],
  'PRACTICE': ['LOST', 'RETURNED_USED', 'OTHER'],
  'RETURNED_USED': [],
  'OTHER': [],
  'DELETE': ['NEW']
};
 
// ============= 
// FUNCTIONS 
// ============= 

const convertNznbbsCodeToFilterCriteria = (nznbbsCode) => {
  // ---------------------------------------------------------------------------- 
  console.info("convertNznbbsCodeToFilterCriteria()");

  switch(nznbbsCode) {
    case '1':
      return { 'and': [
        { 'event_type =' : 'FIRST_MARKING_IN_HAND' },
        { 'event_banding_scheme !=': 'FOREIGN' },
        {'and': [
          { 'characteristic_measurement_value !=': 'DEAD_UNSPECIFIED' },
          { 'characteristic_measurement_value !=': 'DEAD_RECENT' },
          { 'characteristic_measurement_value !=': 'DEAD_NOT_RECENT' }
        ]} 
      ]};
    case 'Z':
      return { 'and': [
        {'or': [
          { 'event_type =' : 'FIRST_MARKING_IN_HAND' },
          { 'event_type =' : 'IN_HAND' },
          { 'event_type =' : 'IN_HAND_PRE_CHANGE' },
          { 'event_type =' : 'IN_HAND_POST_CHANGE' }
        ]},
        { 'event_banding_scheme =': 'FOREIGN' },
        {'and': [
          { 'characteristic_measurement_value !=': 'DEAD_UNSPECIFIED' },
          { 'characteristic_measurement_value !=': 'DEAD_RECENT' },
          { 'characteristic_measurement_value !=': 'DEAD_NOT_RECENT' }
        ]} 
      ]};
      case 'C':
        return { 'and': [
          { 'or': [
              { 'event_type !=' : 'FIRST_MARKING_IN_HAND' }
            ]
          },
          { 'event_bird_situation =' : 'CAPTIVE' },
          { 'event_banding_scheme !=': 'FOREIGN' },
          {'and': [
            { 'characteristic_measurement_value !=': 'DEAD_UNSPECIFIED' },
            { 'characteristic_measurement_value !=': 'DEAD_RECENT' },
            { 'characteristic_measurement_value !=': 'DEAD_NOT_RECENT' }
          ]} 
        ]};
    case '2A':
      return { 'and': [
        { 'event_type =' : 'SIGHTING_BY_PERSON' },
        {'and': [
          { 'characteristic_measurement_value !=': 'DEAD_UNSPECIFIED' },
          { 'characteristic_measurement_value !=': 'DEAD_RECENT' },
          { 'characteristic_measurement_value !=': 'DEAD_NOT_RECENT' }
        ]} 
      ]};
    case '2B':
      return { 'and': [
        { 'event_type =' : 'IN_HAND' },
        { 'event_bird_situation !=' : 'RELEASE_SITE' },
        { 'event_banding_scheme !=': 'FOREIGN' },
        {'and': [
          { 'characteristic_measurement_value !=': 'DEAD_UNSPECIFIED' },
          { 'characteristic_measurement_value !=': 'DEAD_RECENT' },
          { 'characteristic_measurement_value !=': 'DEAD_NOT_RECENT' }
        ]} 
      ]};
    case '3':
      return { 'and': [
        { 'or': [
            { 'event_type =' : 'IN_HAND_PRE_CHANGE' },
            { 'event_type =' : 'IN_HAND_POST_CHANGE' }
          ]
        },
        { 'event_bird_situation !=' : 'RELEASE_SITE' },
        { 'event_banding_scheme !=': 'FOREIGN' },
        {'and': [
          { 'characteristic_measurement_value !=': 'DEAD_UNSPECIFIED' },
          { 'characteristic_measurement_value !=': 'DEAD_RECENT' },
          { 'characteristic_measurement_value !=': 'DEAD_NOT_RECENT' }
        ]} 
      ]};
    case '2C':
      return { 'and': [
        { 'event_type =' : 'RECORDED_BY_TECHNOLOGY' },
        {'and': [
          { 'characteristic_measurement_value !=': 'DEAD_UNSPECIFIED' },
          { 'characteristic_measurement_value !=': 'DEAD_RECENT' },
          { 'characteristic_measurement_value !=': 'DEAD_NOT_RECENT' }
        ]} 
      ]};
    case '2D':
      return { 'and': [
        { 'or': [
            { 'event_type =' : 'IN_HAND' },
            { 'event_type =' : 'IN_HAND_PRE_CHANGE' },
            { 'event_type =' : 'IN_HAND_POST_CHANGE' }
          ]
        },
        { 'event_bird_situation =' : 'RELEASE_SITE' },
        { 'event_banding_scheme !=': 'FOREIGN' },
        {'and': [
          { 'characteristic_measurement_value !=': 'DEAD_UNSPECIFIED' },
          { 'characteristic_measurement_value !=': 'DEAD_RECENT' },
          { 'characteristic_measurement_value !=': 'DEAD_NOT_RECENT' }
        ]} 
      ]};
    case 'X':
      return {'or': [
          { 'characteristic_measurement_value =': 'DEAD_UNSPECIFIED' },
          { 'characteristic_measurement_value =': 'DEAD_RECENT' },
          { 'characteristic_measurement_value =': 'DEAD_NOT_RECENT' }
        ]};
    default:
      return null;
  }
}

const validateBanderStatus = async (customErrorFactory, db, event, claims, governingCognitoGroup) => {
  // ---------------------------------------------------------------------------- 
  console.info("validateBanderStatus()");

  // The Authorisation logic is fairly complex, we call a number of functions to capture each component
  //   of the process
  let banderId = claims.sub;

  let isSuspendedBanderResultset = await db.ro_is_suspended_bander(banderId);

  console.log(isSuspendedBanderResultset);

  if (isSuspendedBanderResultset[0].ro_is_suspended_bander) {
    return customErrorFactory.getError('SuspendedUserError', [claims.sub, claims.sub, 'claims.sub']);
  } 
  else {
    console.log('No errors');
    return null;
  }
}

const deriveNznbbsCode = (record) => {
  // ---------------------------------------------------------------------------- 
  let containsCharacteristicDead = record.characteristic_measurement
                                              .some(measurement => measurement.characteristic_id === 43 
                                                      && (['DEAD_UNSPECIFIED', 'DEAD_RECENT', 'DEAD_NOT_RECENT'].includes(measurement.value)));
       
  if (containsCharacteristicDead) {
    return 'X - Dead: Recovery'
  }
  else if (record.event_type === 'FIRST_MARKING_IN_HAND' && record.event_banding_scheme !== 'FOREIGN') {
    return "1 - First marking";
  }
  else if ((record.event_type === 'FIRST_MARKING_IN_HAND' || ['IN_HAND', 'IN_HAND_PRE_CHANGE', 'IN_HAND_POST_CHANGE'].includes(record.event_type)) && 
              record.event_banding_scheme === 'FOREIGN') {
    return "Z - Foreign Scheme band/mark";
  }
  else if (record.event_type === 'SIGHTING_BY_PERSON' && record.event_bird_situation !== 'CAPTIVE') {
    return "2A - Resighted without being caught";
  }
  else if (['IN_HAND', 'IN_HAND_PRE_CHANGE','IN_HAND_POST_CHANGE'].includes(record.event_type) && record.event_bird_situation === 'RELEASE_SITE') {
    return '2D - Translocation Release';
  }
  else if (record.event_type !== 'FIRST_MARKING_IN_HAND' && record.event_bird_situation === 'CAPTIVE') {
    return 'C - Captive/rehab history';
  }
  else if (['IN_HAND'].includes(record.event_type)) {
    return "2B - Recaptured (but not re-marked)";
  }
  else if (['IN_HAND_PRE_CHANGE','IN_HAND_POST_CHANGE'].includes(record.event_type)) {
    return "3 - Add/Change/Remove Mark";
  }
  else if (record.event_type === 'RECORDED_BY_TECHNOLOGY') {
    return '2C - Technology assisted retrap';
  }
  else if (record.event_type === 'LOST') {
    return 'L - Lost band / destroyed / used for training';
  }
  else if (record.event_type === 'TRANSFER' && 
            record.mark_state.some(mark_state => mark_state.state === 'ALLOCATED') && 
              record.mark_allocation.some(mark_allocation => mark_allocation.bander_id === process.env.BANDING_OFFICE_ID)) {
    return 'R - Returned bands (unused) to Banding Office';
  }
  else if (record.mark_state.some(mark_state => mark_state.state === 'ALLOCATED')) {
    return '0/T - Transfer or allocation record';
  }
  else if (record.event_type === 'PRACTICE') {
    return 'P - Practice bands: issued specifically for training';
  }
  else if (record.mark_state.some(mark_state => mark_state.state === 'RETURNED_USED')) {
    return 'U - Used band returned to the Banding Office';
  }
  else if (record.event_type === 'OTHER') {
    return 'Y - Other use';
  }
  else if (record.event_type === 'NEW_MARK') {
    return 'NEW - New mark'
  }
  else {
    return 'UNKNOWN';
  }
}

const getGoverningCognitoGroup = (claimedGroups) => {
  // ---------------------------------------------------------------------------- 

  console.info("getGoverningCognitoGroup()");

  if (claimedGroups.indexOf(ADMIN_GROUP_NAME) > -1) { return ADMIN_GROUP_NAME; }
  else if (claimedGroups.indexOf(MANAGER_GROUP_NAME) > -1) { return MANAGER_GROUP_NAME; }
  else if (claimedGroups.indexOf(USER_GROUP_NAME) > -1) { return USER_GROUP_NAME; }
  else if (claimedGroups.indexOf(READ_ONLY_GROUP_NAME) > -1) { return READ_ONLY_GROUP_NAME; }
  else { return null; }
}

const getUserProjects = (db, claims) => {
  // ---------------------------------------------------------------------------- 

  return db.ro_bander_project_list(claims.sub).then(res => { console.log(res); return res.map(item => item.ro_bander_project_list); });
}
 
module.exports = { 
  // Constants
  ALLOWABLE_EVENT_SORT_ORDERS,
  ALLOWABLE_EVENT_S_SORT_ORDERS,
  ALLOWABLE_EVENT_FILTERS,
  ALLOWABLE_EVENT_S_FILTERS,
  ALLOWABLE_EVENT_SEARCHES,
  ALLOWABLE_EVENT_S_SEARCHES,
  ADMIN_GROUP_NAME,
  MANAGER_GROUP_NAME,
  USER_GROUP_NAME,
  READ_ONLY_GROUP_NAME,
  USER_MARK_STATE_ACTIONS,
  // Helper Functions
  validateBanderStatus,
  convertNznbbsCodeToFilterCriteria,
  deriveNznbbsCode,
  getGoverningCognitoGroup,
  getUserProjects
}; 
